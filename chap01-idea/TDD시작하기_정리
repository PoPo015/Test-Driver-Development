2장

TDD 흐름 - 테스트 -> 코딩 -> 리팩토링 // 레드 - 그린 - 리팩터

테스트가 개발을 주도. 지속적인 코드정리. 빠른피드백 가능


3장

초반에 복잡한 테스트부터시작 X 구현하기 쉬운 테스트부터 시작하기 O

예외 상황을 먼저 테스트 하자. / 테스트를 통과한뒤에는 리팩토링 진행

테스트 작성순서연습
- 테스트 클래스 이름 정하기. / 파라미터가 많아질수록 가독성이 안좋으니 객체로 넘길것을 고려해볼것.
- 테스트할 목록을 미리 정리하면 좋다. / 모든걸 한번에 테스트 하려고하면 너무방대하고 오래걸리니 간단하게 생각나는거 위주로 먼저하고, 테스트구현은 쉬운거부터 구현
- 시작이 안될때는 단언부터 고민하자.
- TDD를 진행하다보면 구현이 막힐때가있다. 잘못한거같은느낌이 들거나할땐 과감하게 지우고 다시 시작하자.

4장 TDD*기능 명세 설계
- 설계는 기능명세로부터 시작한다.(요구사항 문서를 이용해서 기능명세를 구체화한다.)
- 설계 과정을 지원하는 TDD (TDD를하다보면 테스트 코드를 작성하는과정에서 일부 설계를 진행하게된다)
                          1.테스트의 대상이 될 클래스 이름 선정
                          2. 호출할 메서드 선정
                          3. 호출한 메서드의 리턴타입 선정
                          4. 실행결과
- 필요한 만큼 설계하기 (필요할것으로 예측해서 미리코드를 만들지않는다.필요한 시점에 추가한다.)
- 기능 명세정리 (요구사항문서에 생략된게 많으니, 기능의 입력과 결과를 도출해서 기능 명세를 구체화해야함.)
- TDD는 처음접하는 보드게임과 같다. 보드게임의 규칙을 들었다고해서, 바로 완벽하게 이해하는게 아니다. 게임을진행하며 다양한 상황에 적용하다가 이해한다 TDD도 이와 유사하다.


